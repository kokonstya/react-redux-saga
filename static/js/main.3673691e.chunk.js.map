{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.jsx","components/PostForm.jsx","components/Post.jsx","components/Posts.jsx","components/Loader.jsx","components/FetchedPosts.jsx","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","props","submitHandler","event","preventDefault","title","state","trim","newPost","id","Date","now","toString","console","log","createPost","setState","changeInputHandler","persist","prev","target","name","value","onSubmit","this","alert","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","app","syncPosts","posts","length","map","Post","key","Loader","useDispatch","useSelector","fetchedPosts","loading","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3673691e.chunk.js","sourcesContent":["import {CREATE_POST, HIDE_ALERT, HIDE_LOADER, REQUEST_POSTS, SHOW_ALERT, SHOW_LOADER} from \"./types\";\n\nexport function createPost(post) {\n    return {\n        type: CREATE_POST,\n        payload: post\n    }\n\n}\n\nexport function showLoader() {\n    return {\n        type: SHOW_LOADER\n    }\n}\n\nexport function hideLoader() {\n    return {\n        type: HIDE_LOADER\n    }\n}\n\nexport function showAlert(text) {\n    return dispatch => {\n        dispatch({\n            type: SHOW_ALERT,\n            payload: text\n        })\n        setTimeout(() => {\n                dispatch(hideAlert())\n            }, 3000)\n    }\n}\n\nexport function hideAlert() {\n    return {\n        type: HIDE_ALERT\n    }\n}\n\nexport function fetchPosts() {\n    return {\n        type: REQUEST_POSTS\n    }\n\n\n\n    // return async dispatch => {\n    //     try {\n    //         dispatch(showLoader())\n    //         const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\n    //         const json = await response.json()\n    //         dispatch({type: FETCH_POSTS, payload: json})\n    //         dispatch(hideLoader())\n    //     } catch (e) {\n    //         dispatch(showAlert(\"Что то пошло не так\"))\n    //         dispatch(hideLoader())\n    //     }\n    //\n    // }\n}\n","export const CREATE_POST = 'POST/CREATE_POST'\nexport const FETCH_POSTS = 'POST/FETCH_POSTS'\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const SHOW_LOADER = 'APP/SHOW_LOADER'\nexport const HIDE_LOADER = 'APP/HIDE_LOADER'\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\n","import React from \"react\";\n\nexport const Alert = ({ text }) => (\n    <div className=\"alert alert-warning\" role=\"alert\">\n        {text}\n    </div>\n)","import React from \"react\";\nimport {connect} from \"react-redux\"\nimport {createPost, showAlert} from \"../redux/actions\";\nimport {Alert} from \"./Alert\";\n\nclass PostForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: ''\n        }\n    }\n\n    submitHandler = event => {\n        event.preventDefault()\n\n        const {title} = this.state\n        if (!title.trim()) {\n            return this.props.showAlert(\"Название поста не может быть пустым\")\n        }\n        const newPost = {\n            title, id: Date.now().toString()\n        }\n\n        console.log(newPost)\n        this.props.createPost(newPost)\n        this.setState({ title:'' })\n    }\n\n    changeInputHandler = event => {\n        event.persist()\n        this.setState(prev => ({...prev, ...{\n                [event.target.name]: event.target.value\n            }\n        }))\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n\n                {this.props.alert && <Alert text={this.props.alert} />}\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Заголовок поста</label>\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           id=\"title\"\n                           value={this.state.title}\n                           name=\"title\"\n                           onChange={this.changeInputHandler}\n                    />\n                </div>\n                <button className=\"btn btn-success\">Создать</button>\n            </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    createPost, showAlert\n}\n\nconst mapStateToProps = state => ({\n  alert: state.app.alert\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)","import React from \"react\";\n\nexport default ({ post }) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{post.title}</h5>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport {connect} from \"react-redux\"\nimport Post from \"./Post\";\n\nconst Posts = ({syncPosts}) => {\n    if (!syncPosts.length) {\n        return <p className=\"text-center\">Постов нету</p>\n    }\n    return syncPosts.map(post => <Post post={post} key={post.id} />)\n}\n\nconst mapStateToProps = state => {\n    // console.log(state)\n    return {\n        syncPosts: state.posts.posts\n    }\n}\n\n\nexport default connect(mapStateToProps, null)(Posts)","import React from \"react\";\n\nexport const Loader = () => {\n    return <div className=\"spinner-border text-danger\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n}","import React from \"react\";\nimport Post from \"./Post\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchPosts} from \"../redux/actions\";\nimport {Loader} from \"./Loader\";\n\nexport default () => {\n\n    const dispatch = useDispatch()\n    const posts = useSelector(state => state.posts.fetchedPosts)\n    const loading = useSelector(state => state.app.loading)\n\n    if (loading) {\n        return <Loader />\n    }\n\n    if (!posts.length) {\n        return <button\n            className=\"btn btn-primary\"\n            onClick={() => dispatch(fetchPosts())}\n        >Загрузить</button>\n    }\n\n    return posts.map(post => <Post post={post} key={post.id} />)\n\n\n}","import React from 'react';\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n          <div className=\"col\">\n              <PostForm />\n          </div>\n      </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <h2>Синхронные посты</h2>\n                <Posts />\n            </div>\n            <div className=\"col\">\n                <h2>Асинхронные посты</h2>\n                <FetchedPosts />\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CREATE_POST, FETCH_POSTS} from \"./types\";\n\nconst initialState = {\n    posts: [],\n    fetchedPosts: []\n}\n\nexport const postsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_POST:\n            return {...state, posts: [...state.posts, action.payload]}\n        case FETCH_POSTS:\n            return {...state, fetchedPosts: action.payload}\n        default: return state\n    }\n\n\n}","import {HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER} from \"./types\";\n\nconst initialState = {\n    loading: false,\n    alert: null\n}\n\nexport const appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SHOW_LOADER:\n            return {...state, loading: true}\n        case HIDE_LOADER:\n            return {...state, loading: false}\n        case SHOW_ALERT:\n            return {...state, alert: action.payload}\n        case HIDE_ALERT:\n            return {...state, alert: null}\n        default: return state\n    }\n}","import {combineReducers} from \"redux\";\nimport {postsReducer} from \"./postsReducer\";\nimport {appReducer} from \"./appReducer\";\n\nexport const rootReducer = combineReducers({\n    posts: postsReducer,\n    app: appReducer\n})","import {CREATE_POST} from \"./types\";\nimport {showAlert} from \"./actions\";\n\nconst forbidden = ['fuck', 'php', 'spam']\n\nexport function forbiddenWordsMiddleware({dispatch}) {\n    return function (next) {\n        return function (action) {\n            if (action.type === CREATE_POST) {\n                const found = forbidden.filter(w => action.payload.title.includes(w))\n                if (found.length) {\n                    return dispatch(showAlert('Плохие слова в посте'))\n                }\n            }\n\n            return next(action)\n        }\n    }\n}","import {takeEvery, put, call} from 'redux-saga/effects'\nimport {FETCH_POSTS, REQUEST_POSTS} from \"./types\";\nimport {hideLoader, showAlert, showLoader} from \"./actions\";\n\nexport function* sagaWatcher() {\n    yield takeEvery(REQUEST_POSTS, sagaWorker)\n}\n\nfunction* sagaWorker() {\n    try {\n        yield put(showLoader())\n        const payload = yield call(fetchPosts)\n        yield put({type: FETCH_POSTS, payload})\n        yield put(hideLoader())\n    } catch (e) {\n        yield put(showAlert(\"что-то пошло не так\"))\n        yield put(hideLoader())\n    }\n}\n\n\nasync function fetchPosts() {\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5')\n    return await response.json()\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {compose, createStore, applyMiddleware} from \"redux\";\nimport {Provider} from \"react-redux\"\nimport thunk from \"redux-thunk\";\nimport createSagaMiddleware from 'redux-saga'\nimport {rootReducer} from \"./redux/rootReducer\";\nimport {forbiddenWordsMiddleware} from \"./redux/middleware\";\nimport {sagaWatcher} from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware()\n\n// const store = createStore(rootReducer, compose(\n//     applyMiddleware(thunk, forbiddenWordsMiddleware, saga),\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// ))\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(thunk, forbiddenWordsMiddleware, saga)\n))\n\nsaga.run(sagaWatcher)\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}